/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.gradle.junitplatform;

import java.util.ArrayList;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import io.github.anwyho.linkedlist.*;

@DisplayName("LinkedList Test")
public class LinkedListTest {

  @Nested
  @DisplayName("Test ListNodes")
  class NodeTests {
    @Test
    @DisplayName("Create ListNode")
    void testCreateListNode() {
      ListNode<Integer> n = new ListNode<Integer>(3);
      assertNotNull(n);
    }

    @Test
    @DisplayName("Invalid element type -- this test does not compile.")
    @Disabled
    void testCreateNodeWithInvalidType() {
      // // Compiler will catch error because of ListNode declaration
      // ListNode<ArrayList<Integer>> a = new ListNode<ArrayList<Integer>>();
    }

    @Nested
    @DisplayName("Test String Nodes")
    class StringNodes {

      ListNode<String> na1;
      ListNode<String> na2;
      ListNode<String> nb1;

      @BeforeEach
      void initiateNodes() {
        na1 = new ListNode<String>("Hello, world");
        na2 = new ListNode<String>("Hello, world");
        nb1 = new ListNode<String>("Node 2");
      }


      @Test
      @DisplayName("Test compareTo() / Comparable")
      void testComparingListNodes() {
        assertEquals(na1.compareTo(na2), 0);
        assertNotEquals(na1.compareTo(nb1), 0);
      }

      @Test
      @DisplayName("Test four different types of return ")
      void testNodeEquality() {
        assertTrue(na1.equals(na1));
        assertFalse(na1.equals(null));
        assertTrue(na1.equals(na2));
        assertFalse(na1.equals(nb1));
      }
    }

    @Nested
    @DisplayName("Test Insertions and Deletions")
    class InsertionsAndDeletions {

      ListNode<Character> na;
      ListNode<Character> nb;
      ListNode<Character> nc;
      ListNode<Character> nd;
      ListNode<Character> ne;

      @BeforeEach
      void initiateNodes() {
        na = new ListNode<Character>('A');
        nb = new ListNode<Character>('B');
        nc = new ListNode<Character>('C');
        nd = new ListNode<Character>('D');
        ne = new ListNode<Character>('E');
      }

      // Helper method - compares a char List to 
      boolean checkStringToList(final String pattern, final ListNode<Character> HEAD) {
        ListNode<Character> head = HEAD;
        for (int i = 0; i < pattern.length(); i++) {
          if (head == null) {
            return false;
          }
          if (pattern.charAt(i) == head.data()) {
            System.out.println(head.data());
            head = head.next();
          }
        }
        return true;
      }

      @Test
      void testInsertions() {
        na.insertMeBeforeNode(nc);
        nb.insertMeBeforeNode(nc);
        assertTrue(checkStringToList("ABC",na));
        nd.insertMeAfterNode(nc);
        ne.insertMeAfterNode(na);
        assertTrue(checkStringToList("ACB",na));
      }

      @Test
      void testDeletions() {
        assertEquals((char) na.removeMe(),'A');
        na.insertMeBeforeNode(nb);
        nb.insertMeBeforeNode(nc);
        nc.insertMeBeforeNode(nd);
        nd.insertMeBeforeNode(ne);
        nb.removeMe();
        assertTrue(checkStringToList("ACDE",na));
        na.removeMe();
        assertTrue(checkStringToList("CDE",nc));
        nd.removeMe();
        assertTrue(checkStringToList("CE",nd));
        ne.removeMe();
        assertTrue(checkStringToList("C",nc));
        nc.insertMeAfterNode(na);
        assertTrue(checkStringToList("AC",na));
        na.removeMe();
        assertTrue(checkStringToList("C",nd));
      }
    }
  }

  @Nested
  @DisplayName("Testing Linked Lists")
  class ListTests {

    @Test
    @DisplayName("Create a list")
    void testCreateList() {
      LinkedList<Integer> l = new LinkedList<Integer>();
      assertNotNull(l);
    }



    @Test
    @DisplayName("Tests for circular list checking")
    void testCircularList() {
      // TODO: implement
    }
  }
  
    
  

  // @Test
  // @Disabled
  // void FailingTest() {
  //   fail("failed");
  // }
}